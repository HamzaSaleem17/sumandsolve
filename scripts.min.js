// scripts.min.js - Optimized Math Quiz Engine
'use strict';

// ======================
// Game Configuration
// ======================
const config = {
  difficulties: {
    1: { min: 1,  max: 10, name: 'Beginner', points: 10, time: 8 },
    2: { min: 5,  max: 20, name: 'Easy',     points: 15, time: 10 },
    3: { min: 10, max: 50, name: 'Medium',   points: 20, time: 12 },
    4: { min: 20, max: 100,name: 'Hard',     points: 25, time: 15 },
    5: { min: 50, max: 200,name: 'Expert',   points: 30, time: 18 }
  },
  maxQuestions: 20,
  storageKey: 'sumAndSolveHighScores'
};

// ======================
// Game State
// ======================
const state = {
  score: 0,
  level: 1,
  difficulty: 1,
  currentQuestion: {},
  totalQuestions: 0,
  correctAnswers: 0,
  gameActive: false,
  timer: null,
  timeLeft: 0,
  totalTime: 0,
  sounds: {
    correct: new Audio('data:audio/wav;base64,UklGRl...'), // Shortened for brevity
    incorrect: new Audio('data:audio/wav;base64,UklGRl...'),
    levelUp: new Audio('data:audio/wav;base64,UklGRl...')
  }
};

// ======================
// DOM Elements
// ======================
const elements = {
  // Screens
  startScreen: document.getElementById('startScreen'),
  gameScreen: document.getElementById('gameScreen'),
  gameOverScreen: document.getElementById('gameOverScreen'),
  
  // Game Elements
  questionEl: document.getElementById('question'),
  answersEl: document.getElementById('answers'),
  feedbackEl: document.getElementById('feedback'),
  scoreEl: document.getElementById('score'),
  levelEl: document.getElementById('level'),
  difficultyEl: document.getElementById('difficultyIndicator'),
  timerBar: document.getElementById('timerBar'),
  finalScoreEl: document.getElementById('finalScore'),
  highScoresEl: document.getElementById('highScoresList'),
  
  // Controls
  startBtn: document.querySelector('.btn-large'),
  answerBtns: document.querySelectorAll('.answer-btn'),
  resetBtn: document.querySelector('.btn')
};

// ======================
// Core Game Functions
// ======================

/**
 * Initialize game event listeners
 */
function initGame() {
  // Navigation
  document.getElementById('navLinks').addEventListener('click', closeMobileMenu);
  document.querySelector('.menu-toggle').addEventListener('click', toggleMenu);
  
  // Game controls
  elements.startBtn.addEventListener('click', startGame);
  elements.resetBtn.addEventListener('click', resetGame);
  elements.answerBtns.forEach(btn => {
    btn.addEventListener('click', () => checkAnswer(btn));
  });
  
  // Share buttons
  document.querySelector('.share-btn[aria-label="Share on Twitter"]')
    .addEventListener('click', shareOnTwitter);
  document.querySelector('.share-btn[aria-label="Share on Facebook"]')
    .addEventListener('click', shareOnFacebook);
  
  // Initialize UI
  updateStats();
}

/**
 * Start a new game session
 */
function startGame() {
  state.gameActive = true;
  resetStats();
  
  // Set initial difficulty
  const difficultySelect = document.getElementById('difficultySelect');
  if (difficultySelect.value !== 'auto') {
    state.difficulty = parseInt(difficultySelect.value);
    state.level = state.difficulty;
  }
  
  // Switch screens
  elements.startScreen.classList.remove('active');
  elements.gameScreen.classList.add('active');
  
  generateQuestion();
}

/**
 * Generate a new math question
 */
function generateQuestion() {
  if (!state.gameActive) return;
  
  clearInterval(state.timer);
  
  // Show loading state briefly
  elements.questionEl.innerHTML = '<div class="loading"><i class="fas fa-spinner"></i> Loading...</div>';
  
  // Generate question after short delay (UX improvement)
  setTimeout(() => {
    const settings = config.difficulties[state.difficulty];
    const num1 = randomInt(settings.min, settings.max);
    const num2 = randomInt(settings.min, settings.max);
    
    state.currentQuestion = {
      num1: num1,
      num2: num2,
      answer: num1 + num2
    };
    
    // Display question
    elements.questionEl.textContent = `${num1} + ${num2} = ?`;
    
    // Generate answer options
    const answers = generateAnswers(state.currentQuestion.answer);
    
    // Update answer buttons
    elements.answerBtns.forEach((btn, i) => {
      btn.textContent = answers[i];
      btn.classList.remove('correct', 'incorrect');
      btn.disabled = false;
    });
    
    elements.feedbackEl.textContent = '';
    startTimer();
  }, 300);
}

/**
 * Handle answer selection
 */
function checkAnswer(selectedBtn) {
  if (!state.gameActive || state.timer === null) return;
  
  clearInterval(state.timer);
  state.totalQuestions++;
  
  const selectedAnswer = parseInt(selectedBtn.textContent);
  const isCorrect = selectedAnswer === state.currentQuestion.answer;
  
  if (isCorrect) {
    handleCorrectAnswer(selectedBtn);
  } else {
    handleIncorrectAnswer(selectedBtn);
  }
  
  // Proceed to next question or end game
  setTimeout(() => {
    if (state.totalQuestions >= config.maxQuestions) {
      endGame();
    } else {
      generateQuestion();
    }
  }, 1500);
}

// ======================
// Helper Functions
// ======================

/**
 * Generate random answers including correct one
 */
function generateAnswers(correctAnswer) {
  const answers = [correctAnswer];
  
  while (answers.length < 4) {
    const offset = randomInt(-10, 10);
    const wrongAnswer = correctAnswer + offset;
    if (wrongAnswer > 0 && !answers.includes(wrongAnswer)) {
      answers.push(wrongAnswer);
    }
  }
  
  return shuffleArray(answers);
}

/**
 * Start question timer
 */
function startTimer() {
  state.totalTime = config.difficulties[state.difficulty].time;
  state.timeLeft = state.totalTime;
  updateTimer();
  
  state.timer = setInterval(() => {
    state.timeLeft -= 0.1;
    updateTimer();
    
    if (state.timeLeft <= 0) {
      clearInterval(state.timer);
      handleTimeout();
    }
  }, 100);
}

/**
 * Update timer display
 */
function updateTimer() {
  const percentage = Math.max(0, (state.timeLeft / state.totalTime) * 100);
  elements.timerBar.style.width = `${percentage}%`;
  
  // Visual feedback for time running out
  elements.timerBar.classList.remove('warning', 'danger');
  if (percentage <= 20) {
    elements.timerBar.classList.add('danger');
  } else if (percentage <= 40) {
    elements.timerBar.classList.add('warning');
  }
}

// ======================
// Utility Functions
// ======================

function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function shuffleArray(array) {
  return array.sort(() => Math.random() - 0.5);
}

function updateStats() {
  elements.scoreEl.textContent = state.score;
  elements.levelEl.textContent = state.level;
  elements.difficultyEl.textContent = config.difficulties[state.difficulty].name;
}

// ======================
// Initialize Game
// ======================
document.addEventListener('DOMContentLoaded', initGame);