document.addEventListener('DOMContentLoaded',()=>{let currentScore=0;let currentLevel=1;let correctAnswers=0;let currentQuestion={};let isAnswering=!1;let timerInterval;let timeLeft=30;let isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);const startQuizBtn=document.getElementById('start-quiz-btn');const quizSection=document.getElementById('quiz-section');const scoreDisplay=document.getElementById('score');const levelDisplay=document.getElementById('level');const progressDisplay=document.getElementById('progress');const questionDisplay=document.getElementById('question');const feedbackDisplay=document.getElementById('feedback');const answerButtons=document.querySelectorAll('.answer-button');const badgesContainer=document.getElementById('badges');const resetBtn=document.getElementById('reset-btn');const timerContainer=document.querySelector('.timer-container');function initGame(){updateDisplay();updateBadges();if(startQuizBtn){startQuizBtn.addEventListener('click',startQuiz)}
if(resetBtn){resetBtn.addEventListener('click',resetGame)}
answerButtons.forEach(button=>{button.removeEventListener('click',handleAnswer);button.removeEventListener('touchstart',handleTouchStart);button.removeEventListener('touchend',handleTouchEnd);button.addEventListener('click',handleAnswer);if(isMobile){button.addEventListener('touchstart',handleTouchStart,{passive:!0});button.addEventListener('touchend',handleTouchEnd,{passive:!0})}})}
function handleTouchStart(e){const button=e.target;if(!button.classList.contains('correct')&&!button.classList.contains('incorrect')){button.classList.add('touch-active')}}
function handleTouchEnd(e){const button=e.target;button.classList.remove('touch-active');setTimeout(()=>{if(!isAnswering){handleAnswer(e)}},50)}
function startQuiz(){if(quizSection){quizSection.classList.remove('hidden');setTimeout(()=>{const offset=window.innerWidth<=768?80:20;window.scrollTo({top:quizSection.offsetTop-offset,behavior:'smooth'})},100);generateQuestion()}}
function resetGame(){if(timerInterval){clearInterval(timerInterval)}
currentScore=0;currentLevel=1;correctAnswers=0;timeLeft=30;isAnswering=!1;updateDisplay();updateBadges();generateQuestion();showNotification('Game has been reset!')}
function updateDisplay(){if(scoreDisplay)scoreDisplay.textContent=currentScore;if(levelDisplay)levelDisplay.textContent=currentLevel;if(progressDisplay)progressDisplay.textContent=`${correctAnswers}/20`;updateLevelBasedOnScore()}
function updateLevelBasedOnScore(){const newLevel=Math.floor(currentScore/100)+1;if(newLevel<currentLevel){currentLevel=newLevel;showNotification(`Level decreased to ${currentLevel}!`);updateBadges()}else if(newLevel>currentLevel){currentLevel=newLevel;showNotification(`Level increased to ${currentLevel}!`);updateBadges()}}
function startTimer(){timeLeft=30;if(timerInterval){clearInterval(timerInterval)}
const progressBar=document.querySelector('.timer-progress');if(progressBar){progressBar.style.width='100%'}
if(timerContainer){timerContainer.classList.remove('warning')}
timerInterval=setInterval(()=>{timeLeft--;if(progressBar){const progressPercentage=(timeLeft/30)*100;progressBar.style.width=`${progressPercentage}%`}
if(timeLeft<=10){if(timerContainer){timerContainer.classList.add('warning')}}else{if(timerContainer){timerContainer.classList.remove('warning')}}
if(timeLeft<=0){clearInterval(timerInterval);handleTimeUp()}},1000)}
function handleTimeUp(){if(isAnswering)return;isAnswering=!0;currentScore=Math.max(0,currentScore-2);showFeedback("Time's up! -2 points",'incorrect');sessionStorage.setItem('userScore',currentScore);sessionStorage.setItem('currentLevel',currentLevel);sessionStorage.setItem('correctAnswers',correctAnswers);updateDisplay();answerButtons.forEach(button=>{button.disabled=!0});setTimeout(()=>{generateQuestion()},1500)}
function resetAnswerButtons(){console.log('Resetting answer buttons...');answerButtons.forEach((button,index)=>{console.log(`Resetting button ${index}`);button.classList.remove('correct','incorrect','touch-active');button.disabled=!1;void button.offsetWidth;if(isMobile){button.style.cssText=''}
console.log(`Button ${index} after reset:`,button.className)})}
function generateQuestion(){console.log('Generating new question...');if(feedbackDisplay){feedbackDisplay.classList.add('hidden')}
resetAnswerButtons();if(timerContainer){timerContainer.classList.remove('warning')}
startTimer();let question,answer;switch(currentLevel){case 1:const num1=Math.floor(Math.random()*9)+1;const num2=Math.floor(Math.random()*9)+1;question=`${num1} + ${num2}`;answer=num1+num2;break;case 2:const num3=Math.floor(Math.random()*90)+10;const num4=Math.floor(Math.random()*90)+10;question=`${num3} + ${num4}`;answer=num3+num4;break;case 3:if(Math.random()>0.5){const num5=Math.floor(Math.random()*9)+1;const num6=Math.floor(Math.random()*9)+1;question=`${num5} + ${num6}`;answer=num5+num6}else{const num7=Math.floor(Math.random()*90)+10;const num8=Math.floor(Math.random()*90)+10;question=`${num7} + ${num8}`;answer=num7+num8}
break;case 4:const num9=Math.floor(Math.random()*90)+10;const num10=Math.floor(Math.random()*90)+10;const num11=Math.floor(Math.random()*90)+10;question=`${num9} + ${num10} + ${num11}`;answer=num9+num10+num11;break;default:const complexity=Math.min(currentLevel,10);const digitCount=Math.ceil(complexity/2);const numCount=Math.min(Math.ceil(complexity/3),5);let numbers=[];let total=0;let questionText="";for(let i=0;i<numCount;i++){const min=Math.max(1,Math.pow(10,digitCount-1));const max=Math.pow(10,digitCount)-1;const num=Math.floor(Math.random()*(max-min+1))+min;numbers.push(num);total+=num;if(i>0)questionText+=" + ";questionText+=num}
question=questionText;answer=total;break}
currentQuestion={question,answer};if(questionDisplay)questionDisplay.textContent=question;const options=generateAnswerOptions(answer);answerButtons.forEach((button,index)=>{button.textContent=options[index];button.dataset.answer=options[index]});isAnswering=!1;console.log('New question generated:',question)}
function generateAnswerOptions(correctAnswer){const options=[correctAnswer];while(options.length<4){let option;const variation=Math.floor(Math.random()*10)+1;const sign=Math.random()>0.5?1:-1;option=correctAnswer+(variation*sign);if(option>0&&!options.includes(option)){options.push(option)}}
return options.sort(()=>Math.random()-0.5)}
function handleAnswer(e){if(isAnswering)return;clearInterval(timerInterval);isAnswering=!0;const selectedAnswer=parseInt(e.target.dataset.answer);const isCorrect=selectedAnswer===currentQuestion.answer;e.target.classList.remove('touch-active');if(isCorrect){currentScore+=5;correctAnswers++;e.target.classList.add('correct');showFeedback('Correct! +5 points','correct');if(correctAnswers>=20){correctAnswers=0;showNotification('20 correct answers! Progress reset for next milestone.')}}else{currentScore=Math.max(0,currentScore-2);e.target.classList.add('incorrect');showFeedback(`Incorrect! -2 points. The answer was ${currentQuestion.answer}`,'incorrect')}
sessionStorage.setItem('userScore',currentScore);sessionStorage.setItem('currentLevel',currentLevel);sessionStorage.setItem('correctAnswers',correctAnswers);updateDisplay();answerButtons.forEach(button=>{button.disabled=!0});setTimeout(()=>{generateQuestion()},1500)}
function showFeedback(message,type){if(feedbackDisplay){feedbackDisplay.textContent=message;feedbackDisplay.className=`feedback ${type}`;feedbackDisplay.classList.remove('hidden')}}
function updateBadges(){if(badgesContainer){badgesContainer.innerHTML='';for(let i=1;i<=currentLevel;i++){const badge=document.createElement('div');badge.className='cat-badge';badge.title=`Level ${i} Cat`;const badgeImg=document.createElement('img');badgeImg.src=`images/cat-badge-level-${i}.png`;badgeImg.alt=`Level ${i} Cat Badge`;badge.appendChild(badgeImg);badgesContainer.appendChild(badge)}}}
function showNotification(message){const notification=document.createElement('div');notification.className='notification';notification.textContent=message;document.body.appendChild(notification);setTimeout(()=>{notification.classList.add('show')},10);setTimeout(()=>{notification.classList.remove('show');setTimeout(()=>{if(document.body.contains(notification)){document.body.removeChild(notification)}},300)},3000)}
function loadGameState(){const savedScore=sessionStorage.getItem('userScore');const savedLevel=sessionStorage.getItem('currentLevel');const savedCorrectAnswers=sessionStorage.getItem('correctAnswers');if(savedScore!==null){currentScore=parseInt(savedScore)}
if(savedLevel!==null){currentLevel=parseInt(savedLevel)}
if(savedCorrectAnswers!==null){correctAnswers=parseInt(savedCorrectAnswers)}
updateDisplay();updateBadges()}
loadGameState();initGame()})
